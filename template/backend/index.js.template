//1.Indexer

// import { startStream, types } from "near-lake-framework";

// const lakeConfig = {
//   s3BucketName: "near-lake-data-mainnet",
//   s3RegionName: "eu-central-1",
//   startBlockHeight: 63804051,
// };

// async function handleStreamerMessage(
//   streamerMessage
// ) {
//   const relevantOutcomes =
//     streamerMessage.shards
//       .flatMap((shard) => shard.receiptExecutionOutcomes)
//       .map((outcome) => ({
//         receipt: {
//           id: outcome.receipt.receiptId,
//           receiverId: outcome.receipt.receiverId,
//         },
//         nearSocialMethodCallData: mapOutcomeToNearSocialNotifyObject(outcome),
//       }))
//       .filter((relevantOutcome) => {
//         return (
//           relevantOutcome.receipt.receiverId == "your_account_id_smart_contract" 
//         );
//       });
// }

// (async () => {
//   await startStream(lakeConfig, handleStreamerMessage);
// })();


//2.Backend for transaction processing and other blockchain operation

// import { connect, keyStores, KeyPair, utils } from "near-api-js";
// import dotenv from "dotenv";

// dotenv.config({ path: "../.env" });
// const privateKey = process.env.PRIVATE_KEY;
// const accountId = process.env.ACCOUNT_ID;

// const myKeyStore = new keyStores.InMemoryKeyStore();
// const keyPair = KeyPair.fromString(privateKey);
// await myKeyStore.setKey("testnet", accountId, keyPair);

// const connectionConfig = {
//   networkId: "testnet",
//   keyStore: myKeyStore,
//   nodeUrl: "https://rpc.testnet.near.org",
// };
// const nearConnection = await connect(connectionConfig);

// const account = await nearConnection.account(accountId);


// Create all operations on the blockchain
	